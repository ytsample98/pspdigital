{"ast":null,"code":"export function getTaxDetailsFromGroup(groupName, taxGroups) {\n  if (!groupName || groupName === 'nill' || groupName === 'more') return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  const group = taxGroups.find(tg => tg.groupName === groupName);\n  if (!group || !Array.isArray(group.lineItems)) return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  let totalPercent = 0;\n  let totalAmount = 0;\n  group.lineItems.forEach(item => {\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\n  });\n  return {\n    totalPercent,\n    totalAmount\n  };\n} // calculation.js\n\nexport function normalizeQty(item) {\n  var _ref, _ref2, _item$qty;\n\n  return parseFloat((_ref = (_ref2 = (_item$qty = item.qty) !== null && _item$qty !== void 0 ? _item$qty : item.quoteqty) !== null && _ref2 !== void 0 ? _ref2 : item.orderQty) !== null && _ref !== void 0 ? _ref : 0) || 0;\n}\nexport function normalizeTaxGroups(item) {\n  if (Array.isArray(item.taxGroupNames) && item.taxGroupNames.length) {\n    return item.taxGroupNames;\n  }\n\n  if (item.taxGroupName) return [item.taxGroupName];\n  if (item.taxId) return [item.taxId];\n  return [];\n}\nexport function recalculateTotals({\n  lineItems,\n  freightCharges,\n  packingCharges,\n  taxPercent,\n  taxGroups\n}) {\n  let lineTotal = 0;\n  let lineTaxTotal = 0;\n  const updatedLineItems = lineItems.map(item => {\n    const qty = normalizeQty(item);\n    const unitPrice = parseFloat(item.unitPrice || 0);\n    const baseTotal = qty * unitPrice;\n    const groupNames = normalizeTaxGroups(item);\n    let percent = 0,\n        amount = 0;\n    groupNames.forEach(groupName => {\n      const group = taxGroups.find(t => t.groupName === groupName);\n\n      if (group && Array.isArray(group.lineItems)) {\n        group.lineItems.forEach(comp => {\n          const val = parseFloat(comp.percentOrAmt || 0);\n          if (comp.type === 'Percentage') percent += val;\n          if (comp.type === 'Amount') amount += val;\n        });\n      }\n    });\n    const itemTaxAmt = baseTotal * percent / 100 + amount;\n    const itemTotal = baseTotal;\n    lineTotal += baseTotal;\n    lineTaxTotal += itemTaxAmt;\n    return { ...item,\n      qty,\n      // normalized qty\n      taxAmt: itemTaxAmt.toFixed(2),\n      total: baseTotal.toFixed(2)\n    };\n  });\n  const freight = parseFloat(freightCharges || 0);\n  const packing = parseFloat(packingCharges || 0);\n  const freightPercent = parseFloat(taxPercent || 0);\n  const freightTaxAmount = freight * freightPercent / 100;\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\n  const docValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\n  return {\n    updatedLineItems,\n    freighttaxAmount: freightTaxAmount.toFixed(2),\n    taxAmount: totalTaxAmount.toFixed(2),\n    quoteValue: docValue.toFixed(2),\n    orderValue: docValue.toFixed(2),\n    docValue: docValue.toFixed(2) // can map to quoteValue/orderValue/invoiceValue\n\n  };\n}\nexport function getTaxPercentage(taxComponents, taxId) {\n  const tax = taxComponents.find(tc => tc.id === taxId);\n  return (tax === null || tax === void 0 ? void 0 : tax.percentage) || 0;\n}","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/sales/salestransactions/calculation.js"],"names":["getTaxDetailsFromGroup","groupName","taxGroups","totalPercent","totalAmount","group","find","tg","Array","isArray","lineItems","forEach","item","type","parseFloat","percentOrAmt","normalizeQty","qty","quoteqty","orderQty","normalizeTaxGroups","taxGroupNames","length","taxGroupName","taxId","recalculateTotals","freightCharges","packingCharges","taxPercent","lineTotal","lineTaxTotal","updatedLineItems","map","unitPrice","baseTotal","groupNames","percent","amount","t","comp","val","itemTaxAmt","itemTotal","taxAmt","toFixed","total","freight","packing","freightPercent","freightTaxAmount","totalTaxAmount","docValue","freighttaxAmount","taxAmount","quoteValue","orderValue","getTaxPercentage","taxComponents","tax","tc","id","percentage"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAC3D,MAAI,CAACD,SAAD,IAAcA,SAAS,KAAK,MAA5B,IAAsCA,SAAS,KAAK,MAAxD,EAAgE,OAAO;AAAEE,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAP;AAChE,QAAMC,KAAK,GAAGH,SAAS,CAACI,IAAV,CAAeC,EAAE,IAAIA,EAAE,CAACN,SAAH,KAAiBA,SAAtC,CAAd;AACA,MAAI,CAACI,KAAD,IAAU,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACK,SAApB,CAAf,EAA+C,OAAO;AAAEP,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAP;AAC/C,MAAID,YAAY,GAAG,CAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACAC,EAAAA,KAAK,CAACK,SAAN,CAAgBC,OAAhB,CAAwBC,IAAI,IAAI;AAC9B,QAAIA,IAAI,CAACC,IAAL,KAAc,YAAlB,EAAgCV,YAAY,IAAIW,UAAU,CAACF,IAAI,CAACG,YAAL,IAAqB,CAAtB,CAA1B,CAAhC,KACK,IAAIH,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4BT,WAAW,IAAIU,UAAU,CAACF,IAAI,CAACG,YAAL,IAAqB,CAAtB,CAAzB;AAClC,GAHD;AAIA,SAAO;AAAEZ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD,C,CAED;;AACA,OAAO,SAASY,YAAT,CAAsBJ,IAAtB,EAA4B;AAAA;;AACjC,SAAOE,UAAU,+BACfF,IAAI,CAACK,GADU,iDACHL,IAAI,CAACM,QADF,yCACcN,IAAI,CAACO,QADnB,uCAC+B,CAD/B,CAAV,IAEF,CAFL;AAGD;AAED,OAAO,SAASC,kBAAT,CAA4BR,IAA5B,EAAkC;AACvC,MAAIJ,KAAK,CAACC,OAAN,CAAcG,IAAI,CAACS,aAAnB,KAAqCT,IAAI,CAACS,aAAL,CAAmBC,MAA5D,EAAoE;AAClE,WAAOV,IAAI,CAACS,aAAZ;AACD;;AACD,MAAIT,IAAI,CAACW,YAAT,EAAuB,OAAO,CAACX,IAAI,CAACW,YAAN,CAAP;AACvB,MAAIX,IAAI,CAACY,KAAT,EAAgB,OAAO,CAACZ,IAAI,CAACY,KAAN,CAAP;AAChB,SAAO,EAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2B;AAAEf,EAAAA,SAAF;AAAagB,EAAAA,cAAb;AAA6BC,EAAAA,cAA7B;AAA6CC,EAAAA,UAA7C;AAAyD1B,EAAAA;AAAzD,CAA3B,EAAiG;AACtG,MAAI2B,SAAS,GAAG,CAAhB;AACA,MAAIC,YAAY,GAAG,CAAnB;AAEA,QAAMC,gBAAgB,GAAGrB,SAAS,CAACsB,GAAV,CAAcpB,IAAI,IAAI;AAC7C,UAAMK,GAAG,GAAGD,YAAY,CAACJ,IAAD,CAAxB;AACA,UAAMqB,SAAS,GAAGnB,UAAU,CAACF,IAAI,CAACqB,SAAL,IAAkB,CAAnB,CAA5B;AACA,UAAMC,SAAS,GAAGjB,GAAG,GAAGgB,SAAxB;AAEA,UAAME,UAAU,GAAGf,kBAAkB,CAACR,IAAD,CAArC;AAEA,QAAIwB,OAAO,GAAG,CAAd;AAAA,QAAiBC,MAAM,GAAG,CAA1B;AACAF,IAAAA,UAAU,CAACxB,OAAX,CAAmBV,SAAS,IAAI;AAC9B,YAAMI,KAAK,GAAGH,SAAS,CAACI,IAAV,CAAegC,CAAC,IAAIA,CAAC,CAACrC,SAAF,KAAgBA,SAApC,CAAd;;AACA,UAAII,KAAK,IAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACK,SAApB,CAAb,EAA6C;AAC3CL,QAAAA,KAAK,CAACK,SAAN,CAAgBC,OAAhB,CAAwB4B,IAAI,IAAI;AAC9B,gBAAMC,GAAG,GAAG1B,UAAU,CAACyB,IAAI,CAACxB,YAAL,IAAqB,CAAtB,CAAtB;AACA,cAAIwB,IAAI,CAAC1B,IAAL,KAAc,YAAlB,EAAgCuB,OAAO,IAAII,GAAX;AAChC,cAAID,IAAI,CAAC1B,IAAL,KAAc,QAAlB,EAA4BwB,MAAM,IAAIG,GAAV;AAC7B,SAJD;AAKD;AACF,KATD;AAWA,UAAMC,UAAU,GAAIP,SAAS,GAAGE,OAAb,GAAwB,GAAxB,GAA8BC,MAAjD;AACA,UAAMK,SAAS,GAAGR,SAAlB;AAEAL,IAAAA,SAAS,IAAIK,SAAb;AACAJ,IAAAA,YAAY,IAAIW,UAAhB;AAEA,WAAO,EACL,GAAG7B,IADE;AAELK,MAAAA,GAFK;AAEA;AACL0B,MAAAA,MAAM,EAAEF,UAAU,CAACG,OAAX,CAAmB,CAAnB,CAHH;AAILC,MAAAA,KAAK,EAAEX,SAAS,CAACU,OAAV,CAAkB,CAAlB;AAJF,KAAP;AAOD,GAhCwB,CAAzB;AAkCA,QAAME,OAAO,GAAGhC,UAAU,CAACY,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAMqB,OAAO,GAAGjC,UAAU,CAACa,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAMqB,cAAc,GAAGlC,UAAU,CAACc,UAAU,IAAI,CAAf,CAAjC;AACA,QAAMqB,gBAAgB,GAAIH,OAAO,GAAGE,cAAX,GAA6B,GAAtD;AACA,QAAME,cAAc,GAAGpB,YAAY,GAAGmB,gBAAtC;AACA,QAAME,QAAQ,GAAGtB,SAAS,GAAGC,YAAZ,GAA2BgB,OAA3B,GAAqCC,OAArC,GAA+CE,gBAAhE;AAEA,SAAO;AACLlB,IAAAA,gBADK;AAELqB,IAAAA,gBAAgB,EAAEH,gBAAgB,CAACL,OAAjB,CAAyB,CAAzB,CAFb;AAGLS,IAAAA,SAAS,EAAEH,cAAc,CAACN,OAAf,CAAuB,CAAvB,CAHN;AAILU,IAAAA,UAAU,EAAEH,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CAJP;AAKLW,IAAAA,UAAU,EAAEJ,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CALP;AAMLO,IAAAA,QAAQ,EAAEA,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CANL,CAM0B;;AAN1B,GAAP;AAQD;AAED,OAAO,SAASY,gBAAT,CAA0BC,aAA1B,EAAyCjC,KAAzC,EAAgD;AACrD,QAAMkC,GAAG,GAAGD,aAAa,CAACnD,IAAd,CAAmBqD,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUpC,KAAnC,CAAZ;AACA,SAAO,CAAAkC,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,UAAL,KAAmB,CAA1B;AACD","sourcesContent":["export function getTaxDetailsFromGroup(groupName, taxGroups) {\r\n  if (!groupName || groupName === 'nill' || groupName === 'more') return { totalPercent: 0, totalAmount: 0 };\r\n  const group = taxGroups.find(tg => tg.groupName === groupName);\r\n  if (!group || !Array.isArray(group.lineItems)) return { totalPercent: 0, totalAmount: 0 };\r\n  let totalPercent = 0;\r\n  let totalAmount = 0;\r\n  group.lineItems.forEach(item => {\r\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);\r\n    else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\r\n  });\r\n  return { totalPercent, totalAmount };\r\n}\r\n\r\n// calculation.js\r\nexport function normalizeQty(item) {\r\n  return parseFloat(\r\n    item.qty ?? item.quoteqty ?? item.orderQty ?? 0\r\n  ) || 0;\r\n}\r\n\r\nexport function normalizeTaxGroups(item) {\r\n  if (Array.isArray(item.taxGroupNames) && item.taxGroupNames.length) {\r\n    return item.taxGroupNames;\r\n  }\r\n  if (item.taxGroupName) return [item.taxGroupName];\r\n  if (item.taxId) return [item.taxId];\r\n  return [];\r\n}\r\n\r\nexport function recalculateTotals({ lineItems, freightCharges, packingCharges, taxPercent, taxGroups }) {\r\n  let lineTotal = 0;\r\n  let lineTaxTotal = 0;\r\n\r\n  const updatedLineItems = lineItems.map(item => {\r\n    const qty = normalizeQty(item);\r\n    const unitPrice = parseFloat(item.unitPrice || 0);\r\n    const baseTotal = qty * unitPrice;\r\n\r\n    const groupNames = normalizeTaxGroups(item);\r\n\r\n    let percent = 0, amount = 0;\r\n    groupNames.forEach(groupName => {\r\n      const group = taxGroups.find(t => t.groupName === groupName);\r\n      if (group && Array.isArray(group.lineItems)) {\r\n        group.lineItems.forEach(comp => {\r\n          const val = parseFloat(comp.percentOrAmt || 0);\r\n          if (comp.type === 'Percentage') percent += val;\r\n          if (comp.type === 'Amount') amount += val;\r\n        });\r\n      }\r\n    });\r\n\r\n    const itemTaxAmt = (baseTotal * percent) / 100 + amount;\r\n    const itemTotal = baseTotal ;\r\n\r\n    lineTotal += baseTotal;\r\n    lineTaxTotal += itemTaxAmt;\r\n\r\n    return {\r\n      ...item,\r\n      qty, // normalized qty\r\n      taxAmt: itemTaxAmt.toFixed(2),\r\n      total: baseTotal.toFixed(2)\r\n      \r\n    };\r\n  });\r\n\r\n  const freight = parseFloat(freightCharges || 0);\r\n  const packing = parseFloat(packingCharges || 0);\r\n  const freightPercent = parseFloat(taxPercent || 0);\r\n  const freightTaxAmount = (freight * freightPercent) / 100;\r\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\r\n  const docValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\r\n\r\n  return {\r\n    updatedLineItems,\r\n    freighttaxAmount: freightTaxAmount.toFixed(2),\r\n    taxAmount: totalTaxAmount.toFixed(2),\r\n    quoteValue: docValue.toFixed(2), \r\n    orderValue: docValue.toFixed(2),\r\n    docValue: docValue.toFixed(2)  // can map to quoteValue/orderValue/invoiceValue\r\n  };\r\n}\r\n\r\nexport function getTaxPercentage(taxComponents, taxId) {\r\n  const tax = taxComponents.find(tc => tc.id === taxId);\r\n  return tax?.percentage || 0;\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}