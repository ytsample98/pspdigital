{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\College\\\\admin\\\\StarAdmin-Free-React-Admin-Template-master\\\\template\\\\demo_1\\\\src\\\\app\\\\inventory\\\\invstockdetails\\\\StockLedger.js\";\nimport React, { Component } from \"react\";\nimport { db } from \"../../../firebase\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport \"../../../assets/styles/components/_custom-table.scss\";\n\nclass StockLedger extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ledgerRows: [],\n      products: []\n    };\n  }\n\n  async componentDidMount() {\n    // Fetch products for name lookup\n    const prodSnap = await getDocs(collection(db, \"products\"));\n    const products = prodSnap.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })); // Fetch opening stocks\n\n    const openSnap = await getDocs(collection(db, \"openStocks\"));\n    const openStocks = openSnap.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })); // Fetch quotes (simulate sales)\n\n    const quoteSnap = await getDocs(collection(db, \"quotes\"));\n    const quotes = quoteSnap.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })); // Build transactions for each product\n\n    let transactions = []; // Opening Stock transactions\n\n    openStocks.forEach(os => {\n      (os.lineItems || []).forEach(li => {\n        transactions.push({\n          date: os.date,\n          productId: li.item,\n          // item is productId or ptshortName\n          type: \"Opening Stock\",\n          qtyIn: parseFloat(li.qty) || 0,\n          qtyOut: 0,\n          reference: \"Opening Balance\"\n        });\n      });\n    }); // Quote transactions (simulate sales)\n\n    quotes.forEach(q => {\n      (q.lineItems || []).forEach(li => {\n        transactions.push({\n          date: q.quoteDate,\n          productId: li.itemCode,\n          // itemCode is productId\n          type: \"Sales Quote\",\n          qtyIn: 0,\n          qtyOut: parseFloat(li.qty) || 0,\n          reference: `Quote#${q.quoteNo || q.id}`\n        });\n      });\n    }); // Sort transactions by date ascending\n\n    transactions.sort((a, b) => new Date(a.date) - new Date(b.date)); // Calculate running balance for each product\n\n    let balanceMap = {};\n    let ledgerRows = [];\n    transactions.forEach(tx => {\n      const prod = products.find(p => p.productId === tx.productId || p.ptshortName === tx.productId) || {};\n      const key = tx.productId;\n      if (!balanceMap[key]) balanceMap[key] = 0;\n      balanceMap[key] += tx.qtyIn - tx.qtyOut;\n      ledgerRows.push({\n        date: tx.date,\n        productId: tx.productId,\n        productName: prod.ptshortName || prod.productId || tx.productId,\n        transactionType: tx.type,\n        qtyIn: tx.qtyIn,\n        qtyOut: tx.qtyOut,\n        balance: balanceMap[key],\n        reference: tx.reference\n      });\n    });\n    this.setState({\n      ledgerRows,\n      products\n    });\n  }\n\n  render() {\n    const {\n      ledgerRows\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card full-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Stock Ledger\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table table-bordered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, \"Product ID\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    }, \"Product Name\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, \"Transaction\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }\n    }, \"Qty In\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }, \"Qty Out\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }\n    }, \"Balance\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, \"Reference\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, ledgerRows.map((row, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, row.date), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, row.productId), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, row.productName), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, row.transactionType), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        color: \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, row.qtyIn), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, row.qtyOut), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, row.balance), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, row.reference || \"-\"))), ledgerRows.length === 0 && /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"8\",\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"No records found\")))))));\n  }\n\n}\n\nexport default StockLedger;","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/inventory/invstockdetails/StockLedger.js"],"names":["React","Component","db","collection","getDocs","StockLedger","state","ledgerRows","products","componentDidMount","prodSnap","docs","map","doc","id","data","openSnap","openStocks","quoteSnap","quotes","transactions","forEach","os","lineItems","li","push","date","productId","item","type","qtyIn","parseFloat","qty","qtyOut","reference","q","quoteDate","itemCode","quoteNo","sort","a","b","Date","balanceMap","tx","prod","find","p","ptshortName","key","productName","transactionType","balance","setState","render","row","i","color","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { db } from \"../../../firebase\";\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport \"../../../assets/styles/components/_custom-table.scss\";\r\n\r\nclass StockLedger extends Component {\r\n  state = {\r\n    ledgerRows: [],\r\n    products: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Fetch products for name lookup\r\n    const prodSnap = await getDocs(collection(db, \"products\"));\r\n    const products = prodSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    // Fetch opening stocks\r\n    const openSnap = await getDocs(collection(db, \"openStocks\"));\r\n    const openStocks = openSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    // Fetch quotes (simulate sales)\r\n    const quoteSnap = await getDocs(collection(db, \"quotes\"));\r\n    const quotes = quoteSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n    // Build transactions for each product\r\n    let transactions = [];\r\n\r\n    // Opening Stock transactions\r\n    openStocks.forEach(os => {\r\n      (os.lineItems || []).forEach(li => {\r\n        transactions.push({\r\n          date: os.date,\r\n          productId: li.item, // item is productId or ptshortName\r\n          type: \"Opening Stock\",\r\n          qtyIn: parseFloat(li.qty) || 0,\r\n          qtyOut: 0,\r\n          reference: \"Opening Balance\"\r\n        });\r\n      });\r\n    });\r\n\r\n    // Quote transactions (simulate sales)\r\n    quotes.forEach(q => {\r\n      (q.lineItems || []).forEach(li => {\r\n        transactions.push({\r\n          date: q.quoteDate,\r\n          productId: li.itemCode, // itemCode is productId\r\n          type: \"Sales Quote\",\r\n          qtyIn: 0,\r\n          qtyOut: parseFloat(li.qty) || 0,\r\n          reference: `Quote#${q.quoteNo || q.id}`\r\n        });\r\n      });\r\n    });\r\n\r\n    // Sort transactions by date ascending\r\n    transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    // Calculate running balance for each product\r\n    let balanceMap = {};\r\n    let ledgerRows = [];\r\n    transactions.forEach(tx => {\r\n      const prod = products.find(p => p.productId === tx.productId || p.ptshortName === tx.productId) || {};\r\n      const key = tx.productId;\r\n      if (!balanceMap[key]) balanceMap[key] = 0;\r\n      balanceMap[key] += tx.qtyIn - tx.qtyOut;\r\n      ledgerRows.push({\r\n        date: tx.date,\r\n        productId: tx.productId,\r\n        productName: prod.ptshortName || prod.productId || tx.productId,\r\n        transactionType: tx.type,\r\n        qtyIn: tx.qtyIn,\r\n        qtyOut: tx.qtyOut,\r\n        balance: balanceMap[key],\r\n        reference: tx.reference\r\n      });\r\n    });\r\n\r\n    this.setState({ ledgerRows, products });\r\n  }\r\n\r\n  render() {\r\n    const { ledgerRows } = this.state;\r\n    return (\r\n      <div className=\"card full-height\">\r\n        <div className=\"card-body\">\r\n          <h4 className=\"card-title\">Stock Ledger</h4>\r\n          <div className=\"table-responsive\">\r\n            <table className=\"table table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <th>Product ID</th>\r\n                  <th>Product Name</th>\r\n                  <th>Transaction</th>\r\n                  <th>Qty In</th>\r\n                  <th>Qty Out</th>\r\n                  <th>Balance</th>\r\n                  <th>Reference</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {ledgerRows.map((row, i) => (\r\n                  <tr key={i}>\r\n                    <td>{row.date}</td>\r\n                    <td>{row.productId}</td>\r\n                    <td>{row.productName}</td>\r\n                    <td>{row.transactionType}</td>\r\n                    <td style={{ color: \"green\" }}>{row.qtyIn}</td>\r\n                    <td style={{ color: \"red\" }}>{row.qtyOut}</td>\r\n                    <td>{row.balance}</td>\r\n                    <td>{row.reference || \"-\"}</td>\r\n                  </tr>\r\n                ))}\r\n                {ledgerRows.length === 0 && (\r\n                  <tr>\r\n                    <td colSpan=\"8\" className=\"text-center\">No records found</td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockLedger;"]},"metadata":{},"sourceType":"module"}