{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\College\\\\admin\\\\StarAdmin-Free-React-Admin-Template-master\\\\template\\\\demo_1\\\\src\\\\app\\\\dashboard\\\\Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { db } from \"../../firebase\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Line, Bar } from \"react-chartjs-2\";\nChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activities: [],\n      lineData: null,\n      barData: null\n    };\n\n    this.buildLineChart = () => {\n      const {\n        activities\n      } = this.state; // group by date & source\n\n      const grouped = {};\n      activities.forEach(a => {\n        const date = a.date;\n        if (!grouped[date]) grouped[date] = {};\n        if (!grouped[date][a.source]) grouped[date][a.source] = 0;\n        grouped[date][a.source]++;\n      });\n      const labels = Object.keys(grouped).sort();\n      const sources = [\"Call\", \"Meeting\", \"Demo\", \"Mail\", \"Whatsapp\"];\n      const datasets = sources.map((src, i) => ({\n        label: src,\n        data: labels.map(d => grouped[d][src] || 0),\n        borderColor: this.getColor(i),\n        backgroundColor: this.getColor(i, 0.3),\n        fill: false,\n        tension: 0.4\n      }));\n      this.setState({\n        lineData: {\n          labels,\n          datasets\n        }\n      });\n    };\n\n    this.buildBarChart = () => {\n      const {\n        activities\n      } = this.state; // group by company and source\n\n      const grouped = {};\n      activities.forEach(a => {\n        const company = a.acname || \"Unknown\";\n        if (!grouped[company]) grouped[company] = {};\n        if (!grouped[company][a.source]) grouped[company][a.source] = 0;\n        grouped[company][a.source]++;\n      });\n      const labels = Object.keys(grouped);\n      const sources = [\"Call\", \"Meeting\", \"Demo\", \"Mail\", \"Whatsapp\"];\n      const datasets = sources.map((src, i) => ({\n        label: src,\n        data: labels.map(c => grouped[c][src] || 0),\n        backgroundColor: this.getColor(i, 0.6)\n      }));\n      this.setState({\n        barData: {\n          labels,\n          datasets\n        }\n      });\n    };\n\n    this.getColor = (i, alpha = 1) => {\n      const colors = [`rgba(75,192,192,${alpha})`, // teal\n      `rgba(153,102,255,${alpha})`, // purple\n      `rgba(255,159,64,${alpha})`, // orange\n      `rgba(54,162,235,${alpha})`, // blue\n      `rgba(255,99,132,${alpha})` // red\n      ];\n      return colors[i % colors.length];\n    };\n  }\n\n  componentDidMount() {\n    // real-time listener for activity collection\n    onSnapshot(collection(db, \"activities\"), snapshot => {\n      const activities = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      this.setState({\n        activities\n      }, () => {\n        this.buildLineChart();\n        this.buildBarChart();\n      });\n    });\n  } // Activities trend over time by source\n\n\n  render() {\n    const {\n      lineData,\n      barData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-3 shadow-sm bg-white border-0 mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, \"Sales Statistics Overview\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, \"Lorem ipsum is placeholder text commonly used\"), lineData && /*#__PURE__*/React.createElement(Line, {\n      data: lineData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: \"top\"\n          }\n        }\n      },\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-3 shadow-sm bg-white border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 15\n      }\n    }, \"Market Overview\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, \"Lorem ipsum dolor sit amet consectetur.\"), barData && /*#__PURE__*/React.createElement(Bar, {\n      data: barData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: \"top\"\n          }\n        },\n        scales: {\n          x: {\n            stacked: true\n          },\n          y: {\n            stacked: true\n          }\n        }\n      },\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    })))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/dashboard/Dashboard.js"],"names":["React","Component","Card","Row","Col","db","collection","onSnapshot","Chart","ChartJS","CategoryScale","LinearScale","BarElement","LineElement","PointElement","Title","Tooltip","Legend","Line","Bar","register","Dashboard","state","activities","lineData","barData","buildLineChart","grouped","forEach","a","date","source","labels","Object","keys","sort","sources","datasets","map","src","i","label","data","d","borderColor","getColor","backgroundColor","fill","tension","setState","buildBarChart","company","acname","c","alpha","colors","length","componentDidMount","snapshot","docs","doc","id","render","responsive","plugins","legend","position","scales","x","stacked","y"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { db } from \"../../firebase\";\nimport { collection, onSnapshot } from \"firebase/firestore\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nclass Dashboard extends Component {\n  state = {\n    activities: [],\n    lineData: null,\n    barData: null,\n  };\n\n  componentDidMount() {\n    // real-time listener for activity collection\n    onSnapshot(collection(db, \"activities\"), (snapshot) => {\n      const activities = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      this.setState({ activities }, () => {\n        this.buildLineChart();\n        this.buildBarChart();\n      });\n    });\n  }\n\n  // Activities trend over time by source\n  buildLineChart = () => {\n    const { activities } = this.state;\n\n    // group by date & source\n    const grouped = {};\n    activities.forEach((a) => {\n      const date = a.date;\n      if (!grouped[date]) grouped[date] = {};\n      if (!grouped[date][a.source]) grouped[date][a.source] = 0;\n      grouped[date][a.source]++;\n    });\n\n    const labels = Object.keys(grouped).sort();\n    const sources = [\"Call\", \"Meeting\", \"Demo\", \"Mail\", \"Whatsapp\"];\n\n    const datasets = sources.map((src, i) => ({\n      label: src,\n      data: labels.map((d) => grouped[d][src] || 0),\n      borderColor: this.getColor(i),\n      backgroundColor: this.getColor(i, 0.3),\n      fill: false,\n      tension: 0.4,\n    }));\n\n    this.setState({\n      lineData: { labels, datasets },\n    });\n  };\n\n  // Company vs Sources stacked bar\n  buildBarChart = () => {\n    const { activities } = this.state;\n\n    // group by company and source\n    const grouped = {};\n    activities.forEach((a) => {\n      const company = a.acname || \"Unknown\";\n      if (!grouped[company]) grouped[company] = {};\n      if (!grouped[company][a.source]) grouped[company][a.source] = 0;\n      grouped[company][a.source]++;\n    });\n\n    const labels = Object.keys(grouped);\n    const sources = [\"Call\", \"Meeting\", \"Demo\", \"Mail\", \"Whatsapp\"];\n\n    const datasets = sources.map((src, i) => ({\n      label: src,\n      data: labels.map((c) => grouped[c][src] || 0),\n      backgroundColor: this.getColor(i, 0.6),\n    }));\n\n    this.setState({\n      barData: { labels, datasets },\n    });\n  };\n\n  getColor = (i, alpha = 1) => {\n    const colors = [\n      `rgba(75,192,192,${alpha})`, // teal\n      `rgba(153,102,255,${alpha})`, // purple\n      `rgba(255,159,64,${alpha})`, // orange\n      `rgba(54,162,235,${alpha})`, // blue\n      `rgba(255,99,132,${alpha})`, // red\n    ];\n    return colors[i % colors.length];\n  };\n\n  render() {\n    const { lineData, barData } = this.state;\n\n    return (\n      <div className=\"container mt-4\">\n        <Row>\n          <Col md={12}>\n            <Card className=\"p-3 shadow-sm bg-white border-0 mb-4\">\n              <h5>Sales Statistics Overview</h5>\n              <p>Lorem ipsum is placeholder text commonly used</p>\n              {lineData && (\n                <Line\n                  data={lineData}\n                  options={{\n                    responsive: true,\n                    plugins: {\n                      legend: { position: \"top\" },\n                    },\n                  }}\n                  height={100}\n                />\n              )}\n            </Card>\n          </Col>\n\n          <Col md={12}>\n            <Card className=\"p-3 shadow-sm bg-white border-0\">\n              <h5>Market Overview</h5>\n              <p>Lorem ipsum dolor sit amet consectetur.</p>\n              {barData && (\n                <Bar\n                  data={barData}\n                  options={{\n                    responsive: true,\n                    plugins: {\n                      legend: { position: \"top\" },\n                    },\n                    scales: {\n                      x: { stacked: true },\n                      y: { stacked: true },\n                    },\n                  }}\n                  height={100}\n                />\n              )}\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}