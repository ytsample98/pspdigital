{"ast":null,"code":"export function getTaxDetailsFromGroup(groupName, taxGroups) {\n  if (!groupName || groupName === 'nill' || groupName === 'more') return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  const group = taxGroups.find(tg => tg.groupName === groupName);\n  if (!group || !Array.isArray(group.lineItems)) return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  let totalPercent = 0;\n  let totalAmount = 0;\n  group.lineItems.forEach(item => {\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\n  });\n  return {\n    totalPercent,\n    totalAmount\n  };\n}\nexport function recalculateTotals({\n  lineItems,\n  freightCharges,\n  packingCharges,\n  taxPercent,\n  taxGroups\n}) {\n  let lineTotal = 0;\n  let lineTaxTotal = 0;\n  const updatedLineItems = lineItems.map(item => {\n    var _ref, _ref2, _item$qty, _item$taxGroupNames;\n\n    const qty = parseFloat((_ref = (_ref2 = (_item$qty = item.qty) !== null && _item$qty !== void 0 ? _item$qty : item.quoteqty) !== null && _ref2 !== void 0 ? _ref2 : item.orderQty) !== null && _ref !== void 0 ? _ref : 0) || 0;\n    const unitPrice = parseFloat(item.unitPrice || 0);\n    const baseTotal = unitPrice * qty; // âœ… total without tax\n\n    const groupNames = ((_item$taxGroupNames = item.taxGroupNames) === null || _item$taxGroupNames === void 0 ? void 0 : _item$taxGroupNames.length) ? item.taxGroupNames : [item.taxGroupName || item.taxId || ''];\n    let percent = 0,\n        amount = 0;\n    groupNames.forEach(groupName => {\n      const group = taxGroups.find(t => t.groupName === groupName);\n\n      if (group && Array.isArray(group.lineItems)) {\n        group.lineItems.forEach(comp => {\n          const val = parseFloat(comp.percentOrAmt || 0);\n          if (comp.type === 'Percentage') percent += val;\n          if (comp.type === 'Amount') amount += val;\n        });\n      }\n    });\n    const itemTaxAmt = baseTotal * percent / 100 + amount;\n    lineTotal += baseTotal;\n    lineTaxTotal += itemTaxAmt;\n    return { ...item,\n      qty,\n      taxAmt: itemTaxAmt.toFixed(2),\n      total: baseTotal.toFixed(2) // âœ… exclude tax\n\n    };\n  });\n  const freight = parseFloat(freightCharges || 0);\n  const packing = parseFloat(packingCharges || 0);\n  const freightPercent = parseFloat(taxPercent || 0);\n  const freightTaxAmount = freight * freightPercent / 100;\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\n  const docValue = lineTotal + freight + packing + lineTaxTotal + freightTaxAmount;\n  return {\n    updatedLineItems,\n    freighttaxAmount: freightTaxAmount.toFixed(2),\n    taxAmount: totalTaxAmount.toFixed(2),\n    quoteValue: docValue.toFixed(2),\n    // ðŸ‘ˆ always return \"quoteValue\"\n    orderValue: docValue.toFixed(2),\n    // ðŸ‘ˆ also return \"orderValue\"\n    invoiceValue: docValue.toFixed(2),\n    // ðŸ‘ˆ also return \"invoiceValue\"\n    billValue: docValue.toFixed(2) // ðŸ‘ˆ also return \"billValue\"\n\n  };\n}","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/sales/salestransactions/calculation.js"],"names":["getTaxDetailsFromGroup","groupName","taxGroups","totalPercent","totalAmount","group","find","tg","Array","isArray","lineItems","forEach","item","type","parseFloat","percentOrAmt","recalculateTotals","freightCharges","packingCharges","taxPercent","lineTotal","lineTaxTotal","updatedLineItems","map","qty","quoteqty","orderQty","unitPrice","baseTotal","groupNames","taxGroupNames","length","taxGroupName","taxId","percent","amount","t","comp","val","itemTaxAmt","taxAmt","toFixed","total","freight","packing","freightPercent","freightTaxAmount","totalTaxAmount","docValue","freighttaxAmount","taxAmount","quoteValue","orderValue","invoiceValue","billValue"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAC3D,MAAI,CAACD,SAAD,IAAcA,SAAS,KAAK,MAA5B,IAAsCA,SAAS,KAAK,MAAxD,EACE,OAAO;AAAEE,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAP;AAEF,QAAMC,KAAK,GAAGH,SAAS,CAACI,IAAV,CAAeC,EAAE,IAAIA,EAAE,CAACN,SAAH,KAAiBA,SAAtC,CAAd;AACA,MAAI,CAACI,KAAD,IAAU,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACK,SAApB,CAAf,EACE,OAAO;AAAEP,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAP;AAEF,MAAID,YAAY,GAAG,CAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEAC,EAAAA,KAAK,CAACK,SAAN,CAAgBC,OAAhB,CAAwBC,IAAI,IAAI;AAC9B,QAAIA,IAAI,CAACC,IAAL,KAAc,YAAlB,EAAgCV,YAAY,IAAIW,UAAU,CAACF,IAAI,CAACG,YAAL,IAAqB,CAAtB,CAA1B,CAAhC,KACK,IAAIH,IAAI,CAACC,IAAL,KAAc,QAAlB,EAA4BT,WAAW,IAAIU,UAAU,CAACF,IAAI,CAACG,YAAL,IAAqB,CAAtB,CAAzB;AAClC,GAHD;AAKA,SAAO;AAAEZ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD;AAED,OAAO,SAASY,iBAAT,CAA2B;AAAEN,EAAAA,SAAF;AAAaO,EAAAA,cAAb;AAA6BC,EAAAA,cAA7B;AAA6CC,EAAAA,UAA7C;AAAyDjB,EAAAA;AAAzD,CAA3B,EAAiG;AACtG,MAAIkB,SAAS,GAAG,CAAhB;AACA,MAAIC,YAAY,GAAG,CAAnB;AAEA,QAAMC,gBAAgB,GAAGZ,SAAS,CAACa,GAAV,CAAcX,IAAI,IAAI;AAAA;;AAC7C,UAAMY,GAAG,GAAGV,UAAU,+BAACF,IAAI,CAACY,GAAN,iDAAaZ,IAAI,CAACa,QAAlB,yCAA8Bb,IAAI,CAACc,QAAnC,uCAA+C,CAA/C,CAAV,IAA+D,CAA3E;AACA,UAAMC,SAAS,GAAGb,UAAU,CAACF,IAAI,CAACe,SAAL,IAAkB,CAAnB,CAA5B;AACA,UAAMC,SAAS,GAAGD,SAAS,GAAGH,GAA9B,CAH6C,CAGH;;AAE1C,UAAMK,UAAU,GAAG,wBAAAjB,IAAI,CAACkB,aAAL,4EAAoBC,MAApB,IACfnB,IAAI,CAACkB,aADU,GAEf,CAAClB,IAAI,CAACoB,YAAL,IAAqBpB,IAAI,CAACqB,KAA1B,IAAmC,EAApC,CAFJ;AAIA,QAAIC,OAAO,GAAG,CAAd;AAAA,QAAiBC,MAAM,GAAG,CAA1B;AACAN,IAAAA,UAAU,CAAClB,OAAX,CAAmBV,SAAS,IAAI;AAC9B,YAAMI,KAAK,GAAGH,SAAS,CAACI,IAAV,CAAe8B,CAAC,IAAIA,CAAC,CAACnC,SAAF,KAAgBA,SAApC,CAAd;;AACA,UAAII,KAAK,IAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACK,SAApB,CAAb,EAA6C;AAC3CL,QAAAA,KAAK,CAACK,SAAN,CAAgBC,OAAhB,CAAwB0B,IAAI,IAAI;AAC9B,gBAAMC,GAAG,GAAGxB,UAAU,CAACuB,IAAI,CAACtB,YAAL,IAAqB,CAAtB,CAAtB;AACA,cAAIsB,IAAI,CAACxB,IAAL,KAAc,YAAlB,EAAgCqB,OAAO,IAAII,GAAX;AAChC,cAAID,IAAI,CAACxB,IAAL,KAAc,QAAlB,EAA4BsB,MAAM,IAAIG,GAAV;AAC7B,SAJD;AAKD;AACF,KATD;AAWA,UAAMC,UAAU,GAAIX,SAAS,GAAGM,OAAb,GAAwB,GAAxB,GAA8BC,MAAjD;AAEAf,IAAAA,SAAS,IAAIQ,SAAb;AACAP,IAAAA,YAAY,IAAIkB,UAAhB;AAEA,WAAO,EACL,GAAG3B,IADE;AAELY,MAAAA,GAFK;AAGLgB,MAAAA,MAAM,EAAED,UAAU,CAACE,OAAX,CAAmB,CAAnB,CAHH;AAILC,MAAAA,KAAK,EAAEd,SAAS,CAACa,OAAV,CAAkB,CAAlB,CAJF,CAIyB;;AAJzB,KAAP;AAMD,GAhCwB,CAAzB;AAkCA,QAAME,OAAO,GAAG7B,UAAU,CAACG,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAM2B,OAAO,GAAG9B,UAAU,CAACI,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAM2B,cAAc,GAAG/B,UAAU,CAACK,UAAU,IAAI,CAAf,CAAjC;AACA,QAAM2B,gBAAgB,GAAIH,OAAO,GAAGE,cAAX,GAA6B,GAAtD;AAEA,QAAME,cAAc,GAAG1B,YAAY,GAAGyB,gBAAtC;AACA,QAAME,QAAQ,GAAG5B,SAAS,GAAGuB,OAAZ,GAAsBC,OAAtB,GAAgCvB,YAAhC,GAA+CyB,gBAAhE;AAEA,SAAO;AACLxB,IAAAA,gBADK;AAEL2B,IAAAA,gBAAgB,EAAEH,gBAAgB,CAACL,OAAjB,CAAyB,CAAzB,CAFb;AAGLS,IAAAA,SAAS,EAAEH,cAAc,CAACN,OAAf,CAAuB,CAAvB,CAHN;AAILU,IAAAA,UAAU,EAAEH,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CAJP;AAI6B;AAClCW,IAAAA,UAAU,EAAEJ,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CALP;AAK6B;AAClCY,IAAAA,YAAY,EAAEL,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CANT;AAM6B;AAClCa,IAAAA,SAAS,EAAEN,QAAQ,CAACP,OAAT,CAAiB,CAAjB,CAPN,CAO6B;;AAP7B,GAAP;AASD","sourcesContent":["export function getTaxDetailsFromGroup(groupName, taxGroups) {\r\n  if (!groupName || groupName === 'nill' || groupName === 'more')\r\n    return { totalPercent: 0, totalAmount: 0 };\r\n\r\n  const group = taxGroups.find(tg => tg.groupName === groupName);\r\n  if (!group || !Array.isArray(group.lineItems))\r\n    return { totalPercent: 0, totalAmount: 0 };\r\n\r\n  let totalPercent = 0;\r\n  let totalAmount = 0;\r\n\r\n  group.lineItems.forEach(item => {\r\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);\r\n    else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\r\n  });\r\n\r\n  return { totalPercent, totalAmount };\r\n}\r\n\r\nexport function recalculateTotals({ lineItems, freightCharges, packingCharges, taxPercent, taxGroups }) {\r\n  let lineTotal = 0;\r\n  let lineTaxTotal = 0;\r\n\r\n  const updatedLineItems = lineItems.map(item => {\r\n    const qty = parseFloat(item.qty ?? item.quoteqty ?? item.orderQty ?? 0) || 0;\r\n    const unitPrice = parseFloat(item.unitPrice || 0);\r\n    const baseTotal = unitPrice * qty;        // âœ… total without tax\r\n\r\n    const groupNames = item.taxGroupNames?.length\r\n      ? item.taxGroupNames\r\n      : [item.taxGroupName || item.taxId || ''];\r\n\r\n    let percent = 0, amount = 0;\r\n    groupNames.forEach(groupName => {\r\n      const group = taxGroups.find(t => t.groupName === groupName);\r\n      if (group && Array.isArray(group.lineItems)) {\r\n        group.lineItems.forEach(comp => {\r\n          const val = parseFloat(comp.percentOrAmt || 0);\r\n          if (comp.type === 'Percentage') percent += val;\r\n          if (comp.type === 'Amount') amount += val;\r\n        });\r\n      }\r\n    });\r\n\r\n    const itemTaxAmt = (baseTotal * percent) / 100 + amount;\r\n\r\n    lineTotal += baseTotal;\r\n    lineTaxTotal += itemTaxAmt;\r\n\r\n    return {\r\n      ...item,\r\n      qty,\r\n      taxAmt: itemTaxAmt.toFixed(2),\r\n      total: baseTotal.toFixed(2)   // âœ… exclude tax\r\n    };\r\n  });\r\n\r\n  const freight = parseFloat(freightCharges || 0);\r\n  const packing = parseFloat(packingCharges || 0);\r\n  const freightPercent = parseFloat(taxPercent || 0);\r\n  const freightTaxAmount = (freight * freightPercent) / 100;\r\n\r\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\r\n  const docValue = lineTotal + freight + packing + lineTaxTotal + freightTaxAmount;\r\n\r\n  return {\r\n    updatedLineItems,\r\n    freighttaxAmount: freightTaxAmount.toFixed(2),\r\n    taxAmount: totalTaxAmount.toFixed(2),\r\n    quoteValue: docValue.toFixed(2),  // ðŸ‘ˆ always return \"quoteValue\"\r\n    orderValue: docValue.toFixed(2),  // ðŸ‘ˆ also return \"orderValue\"\r\n    invoiceValue: docValue.toFixed(2),// ðŸ‘ˆ also return \"invoiceValue\"\r\n    billValue: docValue.toFixed(2)    // ðŸ‘ˆ also return \"billValue\"\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}