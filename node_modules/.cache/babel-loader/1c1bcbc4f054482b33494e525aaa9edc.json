{"ast":null,"code":"export function getTaxDetailsFromGroup(groupName, taxGroups) {\n  if (!groupName || groupName === 'nill' || groupName === 'more') return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  const group = taxGroups.find(tg => tg.groupName === groupName);\n  if (!group || !Array.isArray(group.lineItems)) return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  let totalPercent = 0;\n  let totalAmount = 0;\n  group.lineItems.forEach(item => {\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\n  });\n  return {\n    totalPercent,\n    totalAmount\n  };\n}\nexport function recalculateTotals({\n  lineItems,\n  freightCharges,\n  packingCharges,\n  taxPercent,\n  taxGroups\n}) {\n  let lineTotal = 0;\n  let lineTaxTotal = 0;\n  const updatedLineItems = lineItems.map(item => {\n    var _item$taxGroupNames;\n\n    const qty = parseFloat(item.qty || 1);\n    const unitPrice = parseFloat(item.unitPrice || 0);\n    const baseTotal = unitPrice * qty;\n    const groupNames = ((_item$taxGroupNames = item.taxGroupNames) === null || _item$taxGroupNames === void 0 ? void 0 : _item$taxGroupNames.length) ? item.taxGroupNames : [item.taxGroupName || item.taxId || ''];\n    let percent = 0;\n    let amount = 0;\n    groupNames.forEach(groupName => {\n      const group = taxGroups.find(t => t.groupName === groupName);\n\n      if (group && Array.isArray(group.lineItems)) {\n        group.lineItems.forEach(comp => {\n          const val = parseFloat(comp.percentOrAmt || 0);\n          if (comp.type === 'Percentage') percent += val;else if (comp.type === 'Amount') amount += val;\n        });\n      }\n    });\n    const itemTaxAmt = baseTotal * percent / 100 + amount;\n    const itemTotal = baseTotal + itemTaxAmt;\n    lineTotal += baseTotal;\n    lineTaxTotal += itemTaxAmt;\n    return { ...item,\n      taxAmt: itemTaxAmt.toFixed(2),\n      total: itemTotal.toFixed(2)\n    };\n  });\n  const freight = parseFloat(freightCharges || 0);\n  const packing = parseFloat(packingCharges || 0);\n  const freightPercent = parseFloat(taxPercent || 0);\n  const freightTaxAmount = freight * freightPercent / 100;\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\n  const quoteValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\n  return {\n    updatedLineItems,\n    freighttaxAmount: freightTaxAmount.toFixed(2),\n    taxAmount: totalTaxAmount.toFixed(2),\n    quoteValue: quoteValue.toFixed(2)\n  };\n}\nexport function getTaxPercentage(taxComponents, taxId) {\n  const tax = taxComponents.find(tc => tc.id === taxId);\n  return (tax === null || tax === void 0 ? void 0 : tax.percentage) || 0;\n}","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/panelone/calculation.js"],"names":["getTaxDetailsFromGroup","groupName","taxGroups","totalPercent","totalAmount","group","find","tg","Array","isArray","lineItems","forEach","item","type","parseFloat","percentOrAmt","recalculateTotals","freightCharges","packingCharges","taxPercent","lineTotal","lineTaxTotal","updatedLineItems","map","qty","unitPrice","baseTotal","groupNames","taxGroupNames","length","taxGroupName","taxId","percent","amount","t","comp","val","itemTaxAmt","itemTotal","taxAmt","toFixed","total","freight","packing","freightPercent","freightTaxAmount","totalTaxAmount","quoteValue","freighttaxAmount","taxAmount","getTaxPercentage","taxComponents","tax","tc","id","percentage"],"mappings":"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","sourcesContent":["export function getTaxDetailsFromGroup(groupName, taxGroups) {\r\n  if (!groupName || groupName === 'nill' || groupName === 'more') return { totalPercent: 0, totalAmount: 0 };\r\n  const group = taxGroups.find(tg => tg.groupName === groupName);\r\n  if (!group || !Array.isArray(group.lineItems)) return { totalPercent: 0, totalAmount: 0 };\r\n  let totalPercent = 0;\r\n  let totalAmount = 0;\r\n  group.lineItems.forEach(item => {\r\n    if (item.type === 'Percentage') totalPercent += parseFloat(item.percentOrAmt || 0);\r\n    else if (item.type === 'Amount') totalAmount += parseFloat(item.percentOrAmt || 0);\r\n  });\r\n  return { totalPercent, totalAmount };\r\n}\r\n\r\nexport function recalculateTotals({ lineItems, freightCharges, packingCharges, taxPercent, taxGroups }) {\r\n  let lineTotal = 0;\r\n  let lineTaxTotal = 0;\r\n  const updatedLineItems = lineItems.map(item => {\r\n    const qty = parseFloat(item.qty || 1);\r\n    const unitPrice = parseFloat(item.unitPrice || 0);\r\n    const baseTotal = unitPrice * qty;\r\n    const groupNames = item.taxGroupNames?.length ? item.taxGroupNames : [item.taxGroupName || item.taxId || ''];\r\n    let percent = 0;\r\n    let amount = 0;\r\n    groupNames.forEach(groupName => {\r\n      const group = taxGroups.find(t => t.groupName === groupName);\r\n      if (group && Array.isArray(group.lineItems)) {\r\n        group.lineItems.forEach(comp => {\r\n          const val = parseFloat(comp.percentOrAmt || 0);\r\n          if (comp.type === 'Percentage') percent += val;\r\n          else if (comp.type === 'Amount') amount += val;\r\n        });\r\n      }\r\n    });\r\n    const itemTaxAmt = (baseTotal * percent) / 100 + amount;\r\n    const itemTotal = baseTotal + itemTaxAmt;\r\n    lineTotal += baseTotal;\r\n    lineTaxTotal += itemTaxAmt;\r\n    return {\r\n      ...item,\r\n      taxAmt: itemTaxAmt.toFixed(2),\r\n      total: itemTotal.toFixed(2)\r\n    };\r\n  });\r\n  const freight = parseFloat(freightCharges || 0);\r\n  const packing = parseFloat(packingCharges || 0);\r\n  const freightPercent = parseFloat(taxPercent || 0);\r\n  const freightTaxAmount = (freight * freightPercent) / 100;\r\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\r\n  const quoteValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\r\n  return {\r\n    updatedLineItems,\r\n    freighttaxAmount: freightTaxAmount.toFixed(2),\r\n    taxAmount: totalTaxAmount.toFixed(2),\r\n    quoteValue: quoteValue.toFixed(2)\r\n  };\r\n}\r\n\r\nexport function getTaxPercentage(taxComponents, taxId) {\r\n  const tax = taxComponents.find(tc => tc.id === taxId);\r\n  return tax?.percentage || 0;\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}