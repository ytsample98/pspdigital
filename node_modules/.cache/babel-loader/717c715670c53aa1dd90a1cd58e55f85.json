{"ast":null,"code":"// src/utils/calculations.js\nexport const recalculateQuoteTotals = (lineItems, freightCharges, packingCharges, taxPercent) => {\n  let lineTotal = 0;\n  let lineTaxTotal = 0;\n  const updatedLineItems = lineItems.map(item => {\n    // Calculate line total and tax for each item\n    const itemTotal = item.unitPrice * item.qty;\n    const itemTax = itemTotal * item.taxPercent / 100;\n    lineTotal += itemTotal;\n    lineTaxTotal += itemTax;\n    return { ...item,\n      total: itemTotal + itemTax,\n      taxAmt: itemTax\n    };\n  }); // Freight + Freight Tax\n\n  const freight = parseFloat(freightCharges || 0);\n  const packing = parseFloat(packingCharges || 0);\n  const freightTaxAmount = freight * taxPercent / 100; // Final tax and quote value\n\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\n  const quoteValue = lineTotal + totalTaxAmount + freight + packing;\n  return {\n    updatedLineItems,\n    freightTaxAmount: freightTaxAmount.toFixed(2),\n    taxAmount: totalTaxAmount.toFixed(2),\n    quoteValue: quoteValue.toFixed(2)\n  };\n};\nexport const resetFOBFields = formData => {// Logic to reset FOB fields\n  // Return updated formData\n};\nexport const getTaxDetailsFromGroup = (taxGroups, groupName) => {\n  const group = taxGroups.find(tg => tg.groupName === groupName);\n  if (!group || !Array.isArray(group.lineItems)) return {\n    totalPercent: 0,\n    totalAmount: 0\n  };\n  let totalPercent = 0;\n  let totalAmount = 0;\n  group.lineItems.forEach(item => {\n    totalPercent += item.percentOrAmt;\n    totalAmount += item.amount; // Assuming there's an amount field\n  });\n  return {\n    totalPercent,\n    totalAmount\n  };\n};\nexport const getTaxPercentage = (taxComponents, taxId) => {\n  const tax = taxComponents.find(tc => tc.id === taxId);\n  return (tax === null || tax === void 0 ? void 0 : tax.percentage) || 0;\n};","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/panelone/calculation.js"],"names":["recalculateQuoteTotals","lineItems","freightCharges","packingCharges","taxPercent","lineTotal","lineTaxTotal","updatedLineItems","map","item","itemTotal","unitPrice","qty","itemTax","total","taxAmt","freight","parseFloat","packing","freightTaxAmount","totalTaxAmount","quoteValue","toFixed","taxAmount","resetFOBFields","formData","getTaxDetailsFromGroup","taxGroups","groupName","group","find","tg","Array","isArray","totalPercent","totalAmount","forEach","percentOrAmt","amount","getTaxPercentage","taxComponents","taxId","tax","tc","id","percentage"],"mappings":"AAAA;AAEA,OAAO,MAAMA,sBAAsB,GAAG,CAACC,SAAD,EAAYC,cAAZ,EAA4BC,cAA5B,EAA4CC,UAA5C,KAA2D;AAC/F,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,YAAY,GAAG,CAAnB;AAEA,QAAMC,gBAAgB,GAAGN,SAAS,CAACO,GAAV,CAAcC,IAAI,IAAI;AAC7C;AACA,UAAMC,SAAS,GAAGD,IAAI,CAACE,SAAL,GAAiBF,IAAI,CAACG,GAAxC;AACA,UAAMC,OAAO,GAAIH,SAAS,GAAGD,IAAI,CAACL,UAAlB,GAAgC,GAAhD;AACAC,IAAAA,SAAS,IAAIK,SAAb;AACAJ,IAAAA,YAAY,IAAIO,OAAhB;AAEA,WAAO,EACL,GAAGJ,IADE;AAELK,MAAAA,KAAK,EAAEJ,SAAS,GAAGG,OAFd;AAGLE,MAAAA,MAAM,EAAEF;AAHH,KAAP;AAKD,GAZwB,CAAzB,CAJ+F,CAkB/F;;AACA,QAAMG,OAAO,GAAGC,UAAU,CAACf,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAMgB,OAAO,GAAGD,UAAU,CAACd,cAAc,IAAI,CAAnB,CAA1B;AACA,QAAMgB,gBAAgB,GAAIH,OAAO,GAAGZ,UAAX,GAAyB,GAAlD,CArB+F,CAuB/F;;AACA,QAAMgB,cAAc,GAAGd,YAAY,GAAGa,gBAAtC;AACA,QAAME,UAAU,GAAGhB,SAAS,GAAGe,cAAZ,GAA6BJ,OAA7B,GAAuCE,OAA1D;AAEA,SAAO;AACLX,IAAAA,gBADK;AAELY,IAAAA,gBAAgB,EAAEA,gBAAgB,CAACG,OAAjB,CAAyB,CAAzB,CAFb;AAGLC,IAAAA,SAAS,EAAEH,cAAc,CAACE,OAAf,CAAuB,CAAvB,CAHN;AAILD,IAAAA,UAAU,EAAEA,UAAU,CAACC,OAAX,CAAmB,CAAnB;AAJP,GAAP;AAMD,CAjCM;AAmCP,OAAO,MAAME,cAAc,GAAIC,QAAD,IAAc,CAC1C;AACA;AACD,CAHM;AAKP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAC9D,QAAMC,KAAK,GAAGF,SAAS,CAACG,IAAV,CAAeC,EAAE,IAAIA,EAAE,CAACH,SAAH,KAAiBA,SAAtC,CAAd;AACA,MAAI,CAACC,KAAD,IAAU,CAACG,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAAC5B,SAApB,CAAf,EAA+C,OAAO;AAAEiC,IAAAA,YAAY,EAAE,CAAhB;AAAmBC,IAAAA,WAAW,EAAE;AAAhC,GAAP;AAE/C,MAAID,YAAY,GAAG,CAAnB;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEAN,EAAAA,KAAK,CAAC5B,SAAN,CAAgBmC,OAAhB,CAAwB3B,IAAI,IAAI;AAC9ByB,IAAAA,YAAY,IAAIzB,IAAI,CAAC4B,YAArB;AACAF,IAAAA,WAAW,IAAI1B,IAAI,CAAC6B,MAApB,CAF8B,CAEF;AAC7B,GAHD;AAKA,SAAO;AAAEJ,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD,CAbM;AAeP,OAAO,MAAMI,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,KAAhB,KAA0B;AACxD,QAAMC,GAAG,GAAGF,aAAa,CAACV,IAAd,CAAmBa,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUH,KAAnC,CAAZ;AACA,SAAO,CAAAC,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,UAAL,KAAmB,CAA1B;AACD,CAHM","sourcesContent":["// src/utils/calculations.js\r\n\r\nexport const recalculateQuoteTotals = (lineItems, freightCharges, packingCharges, taxPercent) => {\r\n  let lineTotal = 0;\r\n  let lineTaxTotal = 0;\r\n\r\n  const updatedLineItems = lineItems.map(item => {\r\n    // Calculate line total and tax for each item\r\n    const itemTotal = item.unitPrice * item.qty;\r\n    const itemTax = (itemTotal * item.taxPercent) / 100;\r\n    lineTotal += itemTotal;\r\n    lineTaxTotal += itemTax;\r\n\r\n    return {\r\n      ...item,\r\n      total: itemTotal + itemTax,\r\n      taxAmt: itemTax,\r\n    };\r\n  });\r\n\r\n  // Freight + Freight Tax\r\n  const freight = parseFloat(freightCharges || 0);\r\n  const packing = parseFloat(packingCharges || 0);\r\n  const freightTaxAmount = (freight * taxPercent) / 100;\r\n\r\n  // Final tax and quote value\r\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\r\n  const quoteValue = lineTotal + totalTaxAmount + freight + packing;\r\n\r\n  return {\r\n    updatedLineItems,\r\n    freightTaxAmount: freightTaxAmount.toFixed(2),\r\n    taxAmount: totalTaxAmount.toFixed(2),\r\n    quoteValue: quoteValue.toFixed(2),\r\n  };\r\n};\r\n\r\nexport const resetFOBFields = (formData) => {\r\n  // Logic to reset FOB fields\r\n  // Return updated formData\r\n};\r\n\r\nexport const getTaxDetailsFromGroup = (taxGroups, groupName) => {\r\n  const group = taxGroups.find(tg => tg.groupName === groupName);\r\n  if (!group || !Array.isArray(group.lineItems)) return { totalPercent: 0, totalAmount: 0 };\r\n\r\n  let totalPercent = 0;\r\n  let totalAmount = 0;\r\n\r\n  group.lineItems.forEach(item => {\r\n    totalPercent += item.percentOrAmt;\r\n    totalAmount += item.amount; // Assuming there's an amount field\r\n  });\r\n\r\n  return { totalPercent, totalAmount };\r\n};\r\n\r\nexport const getTaxPercentage = (taxComponents, taxId) => {\r\n  const tax = taxComponents.find(tc => tc.id === taxId);\r\n  return tax?.percentage || 0;\r\n};"]},"metadata":{},"sourceType":"module"}