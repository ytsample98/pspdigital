{"ast":null,"code":"// calculation.js\nexport function normalizeQty(item) {\n  var _ref, _ref2, _item$qty;\n\n  return parseFloat((_ref = (_ref2 = (_item$qty = item.qty) !== null && _item$qty !== void 0 ? _item$qty : item.quoteqty) !== null && _ref2 !== void 0 ? _ref2 : item.orderQty) !== null && _ref !== void 0 ? _ref : 0) || 0;\n}\nexport function normalizeTaxGroups(item) {\n  if (Array.isArray(item.taxGroupNames) && item.taxGroupNames.length) {\n    return item.taxGroupNames;\n  }\n\n  if (item.taxGroupName) return [item.taxGroupName];\n  if (item.taxId) return [item.taxId];\n  return [];\n}\nexport function recalculateTotals({\n  lineItems,\n  freightCharges,\n  packingCharges,\n  taxPercent,\n  taxGroups\n}) {\n  let lineTotal = 0;\n  let lineTaxTotal = 0;\n  const updatedLineItems = lineItems.map(item => {\n    const qty = normalizeQty(item);\n    const unitPrice = parseFloat(item.unitPrice || 0);\n    const baseTotal = qty * unitPrice;\n    const groupNames = normalizeTaxGroups(item);\n    let percent = 0,\n        amount = 0;\n    groupNames.forEach(groupName => {\n      const group = taxGroups.find(t => t.groupName === groupName);\n\n      if (group && Array.isArray(group.lineItems)) {\n        group.lineItems.forEach(comp => {\n          const val = parseFloat(comp.percentOrAmt || 0);\n          if (comp.type === 'Percentage') percent += val;\n          if (comp.type === 'Amount') amount += val;\n        });\n      }\n    });\n    const itemTaxAmt = baseTotal * percent / 100 + amount;\n    const itemTotal = baseTotal + itemTaxAmt;\n    lineTotal += baseTotal;\n    lineTaxTotal += itemTaxAmt;\n    return { ...item,\n      qty,\n      // normalized qty\n      taxAmt: itemTaxAmt.toFixed(2),\n      total: itemTotal.toFixed(2)\n    };\n  });\n  const freight = parseFloat(freightCharges || 0);\n  const packing = parseFloat(packingCharges || 0);\n  const freightPercent = parseFloat(taxPercent || 0);\n  const freightTaxAmount = freight * freightPercent / 100;\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\n  const docValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\n  return {\n    updatedLineItems,\n    freighttaxAmount: freightTaxAmount.toFixed(2),\n    taxAmount: totalTaxAmount.toFixed(2),\n    docValue: docValue.toFixed(2) // can map to quoteValue/orderValue/invoiceValue\n\n  };\n}","map":{"version":3,"sources":["C:/Users/College/admin/StarAdmin-Free-React-Admin-Template-master/template/demo_1/src/app/sales/salestransactions/calculation.js"],"names":["normalizeQty","item","parseFloat","qty","quoteqty","orderQty","normalizeTaxGroups","Array","isArray","taxGroupNames","length","taxGroupName","taxId","recalculateTotals","lineItems","freightCharges","packingCharges","taxPercent","taxGroups","lineTotal","lineTaxTotal","updatedLineItems","map","unitPrice","baseTotal","groupNames","percent","amount","forEach","groupName","group","find","t","comp","val","percentOrAmt","type","itemTaxAmt","itemTotal","taxAmt","toFixed","total","freight","packing","freightPercent","freightTaxAmount","totalTaxAmount","docValue","freighttaxAmount","taxAmount"],"mappings":"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","sourcesContent":["// calculation.js\r\nexport function normalizeQty(item) {\r\n  return parseFloat(\r\n    item.qty ?? item.quoteqty ?? item.orderQty ?? 0\r\n  ) || 0;\r\n}\r\n\r\nexport function normalizeTaxGroups(item) {\r\n  if (Array.isArray(item.taxGroupNames) && item.taxGroupNames.length) {\r\n    return item.taxGroupNames;\r\n  }\r\n  if (item.taxGroupName) return [item.taxGroupName];\r\n  if (item.taxId) return [item.taxId];\r\n  return [];\r\n}\r\n\r\nexport function recalculateTotals({ lineItems, freightCharges, packingCharges, taxPercent, taxGroups }) {\r\n  let lineTotal = 0;\r\n  let lineTaxTotal = 0;\r\n\r\n  const updatedLineItems = lineItems.map(item => {\r\n    const qty = normalizeQty(item);\r\n    const unitPrice = parseFloat(item.unitPrice || 0);\r\n    const baseTotal = qty * unitPrice;\r\n\r\n    const groupNames = normalizeTaxGroups(item);\r\n\r\n    let percent = 0, amount = 0;\r\n    groupNames.forEach(groupName => {\r\n      const group = taxGroups.find(t => t.groupName === groupName);\r\n      if (group && Array.isArray(group.lineItems)) {\r\n        group.lineItems.forEach(comp => {\r\n          const val = parseFloat(comp.percentOrAmt || 0);\r\n          if (comp.type === 'Percentage') percent += val;\r\n          if (comp.type === 'Amount') amount += val;\r\n        });\r\n      }\r\n    });\r\n\r\n    const itemTaxAmt = (baseTotal * percent) / 100 + amount;\r\n    const itemTotal = baseTotal + itemTaxAmt;\r\n\r\n    lineTotal += baseTotal;\r\n    lineTaxTotal += itemTaxAmt;\r\n\r\n    return {\r\n      ...item,\r\n      qty, // normalized qty\r\n      taxAmt: itemTaxAmt.toFixed(2),\r\n      total: itemTotal.toFixed(2)\r\n    };\r\n  });\r\n\r\n  const freight = parseFloat(freightCharges || 0);\r\n  const packing = parseFloat(packingCharges || 0);\r\n  const freightPercent = parseFloat(taxPercent || 0);\r\n  const freightTaxAmount = (freight * freightPercent) / 100;\r\n  const totalTaxAmount = lineTaxTotal + freightTaxAmount;\r\n  const docValue = lineTotal + lineTaxTotal + freight + packing + freightTaxAmount;\r\n\r\n  return {\r\n    updatedLineItems,\r\n    freighttaxAmount: freightTaxAmount.toFixed(2),\r\n    taxAmount: totalTaxAmount.toFixed(2),\r\n    docValue: docValue.toFixed(2)  // can map to quoteValue/orderValue/invoiceValue\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}